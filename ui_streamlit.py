import os

import matplotlib.pyplot as plt
import pandas as pd
import streamlit as st

from config import load_config
from import_excel import load_excel
from logger import init_logging
from main import process_rows
from reporter import save_report

st.set_page_config(page_title="–ë–æ—Ç –ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å", layout="wide")

st.title("ü§ñ –ë–æ—Ç –ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –æ—Ç—á–µ—Ç—ã")

tab1, tab2 = st.tabs(["üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])

with tab1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª –∏–∑ 1–°-–ö–ê", type=["xlsx", "xls"])

    if uploaded_file:
        data = load_excel(uploaded_file)
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(data)}")

        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
            cfg = load_config()
            logger, _ = init_logging(cfg.log_level)
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞..."):
                logger.info("[ui] start processing rows=%s", len(data))
                results = process_rows(data, cfg)
                report_path = save_report(results)
            if report_path:
                st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                logger.info("[ui] processing done, report=%s", report_path)
                # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                try:
                    import collections

                    counts = collections.Counter([r.get("status", "unknown") for r in results])
                    st.write({k: counts[k] for k in sorted(counts)})
                except Exception:
                    pass
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                    data=open(report_path, "rb").read(),
                    file_name=os.path.basename(report_path),
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                )
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç.")
                logger.error("[ui] failed to save report")

    st.subheader("üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
    reports = [f for f in os.listdir() if f.startswith("report_") and f.endswith(".xlsx")]
    if reports:
        for r in reports:
            st.write(f"- {r}")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.")

with tab2:
    st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ—Ç—á–µ—Ç–∞–º")
    reports = [f for f in os.listdir() if f.startswith("report_") and f.endswith(".xlsx")]
    if not reports:
        st.info("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        latest_report = sorted(reports)[-1]
        st.write(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: {latest_report}")
        df = pd.read_excel(latest_report)

        if "status" in df.columns:
            status_counts = df["status"].value_counts()
            fig, ax = plt.subplots()
            status_counts.plot(kind="bar", ax=ax)
            ax.set_title("–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (OK/FAIL)")
            st.pyplot(fig)

        if "brand" in df.columns:
            brand_counts = df["brand"].value_counts().head(10)
            fig, ax = plt.subplots()
            brand_counts.plot(kind="barh", ax=ax)
            ax.set_title("–¢–æ–ø-10 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É")
            st.pyplot(fig)

        st.dataframe(df.head(50))
